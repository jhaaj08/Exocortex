# Generated by Django 5.2.4 on 2025-07-29 18:52

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('flashcards', '0012_remove_pdfdocument_concepts_analyzed_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuizSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('total_questions', models.IntegerField(default=0)),
                ('average_difficulty', models.FloatField(default=0.0)),
                ('topics', models.JSONField(default=list, help_text='List of topics covered')),
                ('source_pdf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='flashcards.pdfdocument')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('tf', 'True/False'), ('short', 'Short Answer'), ('essay', 'Essay'), ('fill', 'Fill in the Blank')], default='mcq', max_length=10)),
                ('options', models.JSONField(default=dict, help_text="For MCQ: {'A': 'option1', 'B': 'option2', ...}")),
                ('correct_answer', models.TextField(help_text='Correct answer or answer key')),
                ('explanation', models.TextField(blank=True, help_text='Explanation of the correct answer')),
                ('difficulty', models.IntegerField(choices=[(1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4'), (5, 'Level 5'), (6, 'Level 6'), (7, 'Level 7'), (8, 'Level 8'), (9, 'Level 9'), (10, 'Level 10')], default=5, help_text='Difficulty rating from 1 (easy) to 10 (very hard)')),
                ('topics', models.JSONField(default=list, help_text='List of topics/keywords related to this question')),
                ('cognitive_level', models.CharField(choices=[('remember', 'Remember'), ('understand', 'Understand'), ('apply', 'Apply'), ('analyze', 'Analyze'), ('evaluate', 'Evaluate'), ('create', 'Create')], default='understand', help_text="Bloom's Taxonomy level", max_length=20)),
                ('source_image', models.ImageField(blank=True, null=True, upload_to='quiz_images/')),
                ('source_type', models.CharField(choices=[('image_upload', 'Uploaded Image'), ('ai_generated', 'AI Generated'), ('manual_entry', 'Manual Entry')], default='image_upload', max_length=20)),
                ('extraction_confidence', models.FloatField(default=0.0, help_text='Confidence in text extraction (0.0-1.0)')),
                ('processing_notes', models.TextField(blank=True, help_text='Notes from AI processing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='flashcards.quizset')),
            ],
            options={
                'ordering': ['quiz_set', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('total_questions', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('score_percentage', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=20)),
                ('settings', models.JSONField(default=dict, help_text='Quiz settings like time limit, randomize, etc.')),
                ('quiz_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='flashcards.quizset')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_answer', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('confidence_level', models.IntegerField(blank=True, choices=[(1, '1/5'), (2, '2/5'), (3, '3/5'), (4, '4/5'), (5, '5/5')], help_text="User's confidence in their answer", null=True)),
                ('partial_credit', models.FloatField(default=0.0, help_text='Partial credit for short answer questions (0.0-1.0)')),
                ('answer_analysis', models.TextField(blank=True, help_text='AI analysis of the answer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quiz_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='flashcards.quizattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flashcards.quizquestion')),
            ],
            options={
                'ordering': ['quiz_attempt', 'created_at'],
                'unique_together': {('quiz_attempt', 'question')},
            },
        ),
    ]
